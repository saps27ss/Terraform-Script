Project Overview
You need to set up the following infrastructure for a highly available web application:

A VPC with public and private subnets across two availability zones.
An Internet Gateway for internet access.
A public-facing load balancer.
EC2 instances in private subnets running the web application.
An RDS instance for the database.
Security groups to control access.
Prerequisites
AWS account.
AWS CLI configured.
Terraform installed.

Terraform script:

Main.tf:
resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr
}

resource "aws_subnet" "public" {
  count                   = 2
  vpc_id                  = aws_vpc.main.id
  cidr_block              = element(var.public_subnet_cidr, count.index)
  map_public_ip_on_launch = true
  availability_zone       = element(var.availability_zones, count.index)
}

resource "aws_subnet" "private" {
  count             = 2
  vpc_id            = aws_vpc.main.id
  cidr_block        = element(var.private_subnet_cidr, count.index)
  availability_zone = element(var.availability_zones, count.index)
}

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }
}

resource "aws_route_table_association" "public" {
  count          = 2
  subnet_id      = element(aws_subnet.public.*.id, count.index)
  route_table_id = aws_route_table.public.id
}

resource "aws_security_group" "web" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "web" {
  count         = 2
  ami           = "ami-0862be96e41dcbf74"
  instance_type = var.instance_type
  subnet_id     = element(aws_subnet.private.*.id, count.index)
  vpc_security_group_ids = [
    aws_security_group.web.id
  ]

  tags = {
    Name = "web-instance-${count.index + 1}"
  }
}

resource "aws_elb" "main" {
  name               = "web-app-elb"
  subnets            = aws_subnet.public[*].id

  listener {
    instance_port     = 80
    instance_protocol = "HTTP"
    lb_port           = 80
    lb_protocol       = "HTTP"
  }

  instances = aws_instance.web.*.id

  health_check {
    target              = "HTTP:80/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }

  security_groups = [aws_security_group.web.id]

  tags = {
    Name = "web-app-elb"
}
}

resource "aws_db_subnet_group" "main" {
  name       = "main"
  subnet_ids = aws_subnet.private.*.id

  tags = {
    Name = "main"
  }
}

resource "aws_db_instance" "main" {
  identifier             = "web-app-db"
  instance_class         = var.db_instance_class
  allocated_storage      = 20
  engine                 = "mysql"
  username               = var.db_username
  password               = var.db_password
  db_subnet_group_name   = aws_db_subnet_group.main.name
  skip_final_snapshot    = true
  vpc_security_group_ids = [aws_security_group.web.id]

  tags = {
    Name = "web-app-db"
  }
}

Variables.tf:
variable "vpc_cidr" {
  default = "10.0.0.0/16"
}

variable "public_subnet_cidr" {
  default = ["10.0.1.0/24", "10.0.2.0/24"]
}

variable "private_subnet_cidr" {
  default = ["10.0.3.0/24", "10.0.4.0/24"]
}

variable "db_subnet_cidr" {
  default = ["10.0.5.0/24", "10.0.6.0/24"]
}

variable "instance_type" {
  default = "t2.micro"
}

variable "db_instance_class" {
  default = "db.t3.micro"
}

variable "db_username" {
  default = "admin"
}

variable "db_password" {
  default = "password"
}

variable "availability_zones" {
  default = ["us-east-2a", "us-east-2b"]
}

outputs.tf:
output "vpc_id" {
  value = aws_vpc.main.id
}

output "public_subnet_ids" {
  value = aws_subnet.public.*.id
}

output "private_subnet_ids" {
  value = aws_subnet.private.*.id
}

output "load_balancer_dns" {
  value = aws_elb.main.dns_name
}

output "db_instance_endpoint" {
  value = aws_db_instance.main.endpoint
}

Providers.tf:
provider "aws" {
  region = "us-east-2"
}
